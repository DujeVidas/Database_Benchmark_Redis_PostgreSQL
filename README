# Database Benchmarking with PostgreSQL and Redis

This project utilizes Docker Compose to create an environment with PostgreSQL, Redis, and Python scripts for populating databases using fictitious data generated by the Faker library.

## Prerequisites

Make sure you have Docker and Docker Compose installed on your system.

- [Docker Installation Guide](https://docs.docker.com/get-docker/)
- [Docker Compose Installation Guide](https://docs.docker.com/compose/install/)

Apologies for the oversight! Here's the updated section in the README to clarify that the benchmarking process needs to be run manually:

---

## Running the Benchmark

1. Clone this repository to your local machine:

   ```bash
   git clone https://github.com/DujeVidas/Database_Benchmark_Redis_PostgreSQL.git
   ```

2. Place the provided files (`Dockerfile`, `docker-compose.yml`, `init.sql`, `postgresFaker.py`, `redisFaker.py`, `db_benchmark.py`) in a directory.

3. Open a terminal and navigate to the directory containing the files.

4. Install the required Python dependencies by running:

    ```bash
    pip install redis psycopg2 pandas faker openpyxl psutil
    ```

5. Run the following command to start the benchmarking environment:

   ```bash
   docker-compose up --build
   ```

   This command will:

   - Pull the necessary images (if not available locally)
   - Build the Python scripts' Docker image
   - Create and start the containers for PostgreSQL, Redis, and the Python scripts

6. Manually initiate the benchmarking process by executing the `db_benchmark.py` script. This Python script performs database operations, simulates read-write scenarios, and generates metrics. You need to run this script separately once the Docker containers are up and running.

7. Wait for the benchmarking process to complete. The Python scripts (`postgresFaker.py` and `redisFaker.py`) will populate the databases with fictitious user data, while the `db_benchmark.py` script will conduct performance measurements.

8. Once the benchmarking process finishes, the generated database metrics will be saved in an Excel file (`database_metrics_<NUM_ITERATIONS>.xlsx`) in the project directory.

9. You can view the results and metrics for Redis and PostgreSQL in the generated Excel file.

10. For more detailed instructions on understanding the benchmarking process and adjusting settings, refer to the [README.md](README.md) file in the project directory.

## Notes

- The `postgresFaker.py` script populates the PostgreSQL "users" table with 1000 entries, while `redisFaker.py` inserts 1000 key-value pairs into the Redis database.
- The Faker library generates random user data, including name, address, phone number, date of birth, email, and credit card information.
- The `init.sql` file contains the SQL schema for creating the "users" table in PostgreSQL.
- Adjust the number of iterations or the generated data volume by modifying the appropriate variables in the Python scripts (`postgresFaker.py` and `redisFaker.py`).

---

This updated section clarifies that the `db_benchmark.py` script needs to be manually executed to initiate the benchmarking process after starting the Docker containers.